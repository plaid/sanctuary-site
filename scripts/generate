#!/usr/bin/env node

'use strict';

const fs                = require('fs');
const path              = require('path');
const vm                = require('vm');

const envvar            = require('envvar');
const marked            = require('marked');
const R                 = require('ramda');
const S_                = require('sanctuary');
const $                 = require('sanctuary-def');


const checkTypes        = envvar.boolean('SANCTUARY_CHECK_TYPES', true);
const {create, env}     = S_;
const S                 = create({checkTypes, env});
const def               = $.create({checkTypes, env});

const Either            = S.EitherType;
const I                 = S.I;
const Just              = S.Just;
const K                 = S.K;
const Left              = S.Left;
const Nothing           = S.Nothing;
const Right             = S.Right;
const _                 = S.__;
const ap                = S.ap;
const apply             = R.apply;
const at                = S.at;
const chain             = S.chain;
const compose           = S.compose;
const compose_          = R.compose;
const concat            = S.concat;
const cond              = R.cond;
const contains          = R.contains;
const converge          = R.converge;
const curry3            = S.curry3;
const either            = S.either;
const encaseEither      = S.encaseEither;
const encaseEither2_    = S.encaseEither2_;
const equals            = S.equals;
const flip_             = S.flip_;
const fromMaybe         = S.fromMaybe;
const get               = S.get;
const head              = S.head;
const ifElse            = S.ifElse;
const is                = S.is;
const join              = S.join;
const joinWith          = S.joinWith;
const justs             = S.justs;
const lensProp          = R.lensProp;
const lift2             = S.lift2;
const lt                = R.lt;
const map               = S.map;
const match             = S.match;
const matchAll          = S.matchAll;
const maybeToEither     = S.maybeToEither;
const of                = S.of;
const over              = R.over;
const pair              = R.pair;
const pipe              = S.pipe;
const prop              = S.prop;
const reduce            = S.reduce;
const regex             = S.regex;
const regexEscape       = S.regexEscape;
const repeat            = R.repeat;
const replace           = R.replace;
const sequence          = S.sequence;
const slice_            = R.slice;
const split             = R.split;
const toString          = S.toString;
const unapply           = R.unapply;
const unfoldr           = S.unfoldr;
const unlines           = S.unlines;

const reset             = '\u001B[0m';
const red               = '\u001B[31m';
const green             = '\u001B[32m';

//    Fn :: (Type, Type) -> Type
const Fn = (x, y) => $.Function([x, y]);

//    replace_ :: RegExp -> ([String] -> String) -> String -> String
const replace_ =
def('replace_',
    {},
    [$.RegExp, Fn($.Array($.String), $.String), $.String, $.String],
    (pattern, f, s) => s.replace(pattern,
                                 unapply(compose_(f, slice_(1, -2)))));

//    htmlEncode :: String -> String
const htmlEncode =
def('htmlEncode',
    {},
    [$.String, $.String],
    pipe([replace(/&/g, '&amp;'),
          replace(/</g, '&lt;'),
          replace(/>/g, '&gt;'),
          replace(/"/g, '&quot;')]));

//    wrap :: String -> String -> String -> String
const wrap =
def('wrap',
    {},
    [$.String, $.String, $.String, $.String],
    (before, after, middle) => `${before}${middle}${after}`);

//    el :: String -> String -> String -> String
const el =
def('el',
    {},
    [$.String, $.String, $.String, $.String],
    (tagName, className, innerHtml) =>
      `<${tagName} class="${className}">${innerHtml}</${tagName}>`);

//    toInputMarkup :: String -> String
const toInputMarkup =
def('toInputMarkup',
    {},
    [$.String, $.String],
    pipe([htmlEncode,
          wrap('<input value="', '">'),
          concat(htmlEncode('>\u00A0'))]));

//    sqrt :: Number -> Either String Number
const sqrt =
def('sqrt',
    {},
    [$.Number, Either($.String, $.Number)],
    ifElse(lt(_, 0),
           K(Left('Cannot represent square root of negative number')),
           compose(Right, Math.sqrt)));

//    toOutputMarkup :: String -> String
const toOutputMarkup =
def('toOutputMarkup',
    {},
    [$.String, $.String],
    pipe([encaseEither(prop('message'),
                       curry3(vm.runInNewContext,
                              _,
                              {R: R, S: S_, sqrt: sqrt},
                              {displayErrors: false})),
          either(pipe([concat('! '),
                       htmlEncode,
                       wrap('<div class="output" data-error="true">',
                            '</div>')]),
                 pipe([toString,
                       htmlEncode,
                       wrap('<div class="output">',
                            '</div>')]))]));

//    doctestsToMarkup :: String -> String
const doctestsToMarkup =
def('doctestsToMarkup',
    {},
    [$.String, $.String],
    pipe([matchAll(/^> .*(?:\n[.] .*)*/gm),
          map(prop('match')),
          map(replace(/^../gm, '')),
          map(replace(/^ +/gm, ' ')),
          map(replace(/\n/g, '')),
          map(replace(/^global[.]/, 'const ')),
          map(lift2(pair, toInputMarkup, toOutputMarkup)),
          map(map(concat('    '))),
          map(unlines),
          map(wrap('  <form>\n', '  </form>\n')),
          joinWith(''),
          wrap('<div class="examples">\n', '</div>\n')]));

//    substitutionPattern :: RegExp
const substitutionPattern =
/(<pre>[\s\S]*?<[/]pre>|<div class="examples">[\s\S]*?^<[/]div>| :: |[=~-](?:&gt;|>)|[.][.][.])/gm;

//    substitutions :: String -> String
const substitutions =
def('substitutions',
    {},
    [$.String, $.String],
    replace_(substitutionPattern,
             apply(cond([[equals(' :: '),
                          K(' ' +
                            el('span', 'tight', ':') +
                            el('span', 'tight', ':') +
                            ' ')],
                         [contains(_, ap([I, htmlEncode], ['=>'])),
                          K(el('span', 'arrow', htmlEncode('=>')))],
                         [contains(_, ap([I, htmlEncode], ['~>'])),
                          K(el('span', 'arrow', htmlEncode('~>')))],
                         [contains(_, ap([I, htmlEncode], ['->'])),
                          K(el('span', 'arrow',
                               //  Use NON-BREAKING HYPHEN so arrow does
                               //  not break because of line wrapping
                               el('span', 'arrow-hyphen', '&#x2011;') +
                               htmlEncode('>')))],
                         [equals('...'),
                          K(el('span', 'tight', '.') +
                            el('span', 'tight', '.') +
                            el('span', 'tight', '.'))],
                         [K(true),
                          I]]))));

//    generate :: String -> String
const generate =
def('generate',
    {},
    [$.String, $.String],
    pipe([replace(/<h4 name=/g, '<h4 id='),
          replace_(/^```javascript\n(> [\s\S]*?)^```\n/gm,
                   apply(doctestsToMarkup)),
          //  Replace NO-BREAK SPACE characters with SYMBOL FOR SPACE
          //  characters to work around chjj/marked#363.
          replace(/\u00A0/g, '\u2420'),
          flip_(marked, {pedantic: true}),
          replace(/\u2420/g, '\u00A0'),
          replace(/\n\n(?=\n<[/]code><[/]pre>)/g, ''),
          replace(/(?=<(h[2-6]) id="([^"]*)")/g,
                  '<a class="pilcrow $1" href="#$2">\u00B6</a>\n'),
          substitutions]));

//    readFile :: String -> Either String String
const readFile =
def('readFile',
    {},
    [$.String, Either($.String, $.String)],
    encaseEither(prop('message'), flip_(fs.readFileSync, 'utf8')));

//    writeFile :: String -> String -> Either String String
const writeFile =
def('writeFile',
    {},
    [$.String, $.String, Either($.String, $.String)],
    converge(map,
             [compose_(K, K),
              encaseEither2_(prop('message'), fs.writeFileSync)]));

//    version :: String -> Either String String
const version =
def('version',
    {},
    [$.String, Either($.String, $.String)],
    pipe([flip_(path.join, 'package.json'),
          readFile,
          chain(encaseEither(prop('message'), JSON.parse)),
          map(get(is(String), 'version')),
          chain(maybeToEither('Invalid "version"'))]));

//    customize :: String -> Either String (String -> Either String String)
const customize =
def('customize',
    {},
    [$.String, Either($.String, Fn($.String, Either($.String, $.String)))],
    pipe([readFile,
          map(split(/\n={79}\n\n/)),
          chain(ifElse(compose(equals(2), prop('length')),
                       Right,
                       K(Left('Expected exactly one separator')))),
          map(apply((existing, replacement) =>
                      ifElse(contains(existing),
                             compose(Right, replace(existing, replacement)),
                             K(Left('Substring not found:\n\n' +
                                    existing)))))]));

//    readme :: String -> Either String String
const readme =
def('readme',
    {},
    [$.String, Either($.String, $.String)],
    pipe([flip_(path.join, 'README.md'),
          readFile,
          ap(customize('custom/preamble.md')),
          join,
          ap(customize('custom/type-error.md')),
          join,
          ap(customize('custom/type-checking-sanctuary.md')),
          join,
          ap(customize('custom/type-checking-ramda.md')),
          join,
          map(generate),
          map(concat('\n')),
          map(replace(/\n$/, ''))]));

//    pad :: Integer -> String
const pad =
def('pad',
    {},
    [$.Integer, $.String],
    compose(joinWith(''), repeat('  ')));

//    colon :: String
const colon = regexEscape('<span class="tight">:</span>');

//    codeLink :: RegExp
const codeLink =
regex('', '^<code><a href="[^"]*">(.*? ' + colon + colon + ' .*)</a></code>$');

//    toc :: String -> String
const toc =
def('toc',
    {},
    [$.String, $.String],
    pipe([matchAll(/<(h[1-6]) id="([^"]*)">(.*)<[/]\1>/g),
          map(prop('groups')),
          map(justs),
          reduce(({level, tagName, html}) => ([hN, id, _innerHtml]) => {
            const level$ = Number(hN[1]);
            const level$$ = level$ > level ? hN === tagName ? level : level + 1 : level$;

            const innerHtml =
            replace(/^(<code><a [^>]*>)([^ ]*)/, '$1<b>$2</b>', _innerHtml);

            const html$ =
            html + '\n' +
            (level$$ > level ?
               pad(2 * level$$ - 2) + '<ul' + (level === 1 ? ' id="toc"' : '') + '>\n' +
               pad(2 * level$$ - 1) + '<li>\n' +
               pad(2 * level$$ - 0) :
             level$$ < level ?
               pad(2 * level$$ + 1) + '</li>\n' +
               pad(2 * level$$ - 0) + '</ul>\n' +
               pad(2 * level$$ - 1) + '</li>\n' +
               pad(2 * level$$ - 1) + '<li>\n' +
               pad(2 * level$$ - 0) :
             // else
               pad(2 * level$$ - 1) + '</li>\n' +
               pad(2 * level$$ - 1) + '<li>\n' +
               pad(2 * level$$ - 0)) +
            pipe([match(codeLink),
                  map(prop('groups')),
                  chain(head),
                  join,
                  map(wrap('<code>', '</code>')),
                  fromMaybe(innerHtml),
                  wrap('<a href="#' + id + '">', '</a>')],
                 innerHtml);

            return {level: level$$, tagName: hN, html: html$};
          }, {level: 1, tagName: 'h1', html: ''}),
          over(lensProp('level'),
               compose(joinWith(''),
                       unfoldr(level => level > 1 ?
                                 Just(['\n' + pad(2 * level - 1) + '</li>' +
                                       '\n' + pad(2 * level - 2) + '</ul>',
                                      level - 1]) :
                                 Nothing))),
          lift2(concat, prop('html'), prop('level'))]));

//    toDocument :: String -> String -> String
const toDocument =
def('toDocument',
    {},
    [$.String, $.String, $.String],
    (version, content) => `<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Sanctuary</title>
  <script>
    if (location.hostname.split('.').slice(-2).join('.') === 'github.io') {
      location.replace('http://sanctuary.js.org' +
                       location.pathname.replace('/sanctuary-site/', '/') +
                       location.search +
                       location.hash);
    }
  </script>
  <link rel="stylesheet" href="style.css">
  <link rel="shortcut icon" href="favicon.png">
</head>
<body spellcheck="false">
  <div id="css-header">
    <p>
      Join the Sanctuary community on
      <a href="https://github.com/sanctuary-js/sanctuary">GitHub</a> and
      <a href="https://gitter.im/sanctuary-js/sanctuary">Gitter</a>
    </p>
  </div>
  <div id="css-main">
    <h1 id="sanctuary">Sanctuary <small>v${version}</small></h1>
    <p id="tagline">Refuge from unsafe JavaScript</p>
${toc(content)}
${content}
  </div>
  <script src="vendor/ramda.js"></script>
  <script src="vendor/sanctuary-type-identifiers.js"></script>
  <script src="vendor/sanctuary-type-classes.js"></script>
  <script src="vendor/sanctuary-def.js"></script>
  <script src="vendor/sanctuary.js"></script>
  <script>
    window.Z = window.sanctuaryTypeClasses;
    window.$ = window.sanctuaryDef;
    window.S = window.sanctuary;
  </script>
  <script src="behaviour.js"></script>
</body>
</html>
`);

//    failure :: String -> Undefined
const failure = s => {
  process.stderr.write(`${red}${s}${reset}\n`);
  process.exit(1);
};

//    success :: String -> Undefined
const success = s => {
  process.stdout.write(`${green}Successfully created ${s}${reset}\n`);
  process.exit(0);
};

pipe([at(2),
      maybeToEither('Missing command-line argument'),
      map(of(Array)),
      map(ap([version, readme])),
      chain(sequence(S.Either)),
      map(apply(toDocument)),
      chain(writeFile('index.html')),
      either(failure, success)],
     process.argv);
